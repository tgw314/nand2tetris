// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array body;
    field int maxLength;
    field int length;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int len) {
        let maxLength = len;
        let length = 0;

        if (maxLength < 1) {
            let body = null;
            return this;
        }

        let body = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return body[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let body[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        var int i;
        var Array new;

        if (maxLength < length + 1) {
            let maxLength = 2 * maxLength;
             
            let new = Array.new(maxLength);

            let i = 0; while (i < length) {
                let new[i] = body[i];
                let i = i + 1;
            }

            do body.dispose();
            let body = new;
        }

        let body[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var boolean isNeg;
        var int i, val, d;

        if (length < 1) {
            return 0;
        }

        let i = 0;
        if (body[0] = 45) {
            let i = 1;
            let isNeg = true;
        }

        let val = 0;
        while ((i < length) & (47 < body[i]) & (body[i] < 58)) {
            let d = body[i] - 48;
            let val = val * 10 + d;

            let i = i + 1;
        }

        if (isNeg) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int lastDigit;
        var char c;
        var boolean isNeg;

        let isNeg = val < 0;
        let val = Math.abs(val);

        let lastDigit = val - (10 * (val / 10));  // val % 10
        let c = lastDigit + 48;

        if (isNeg) {
            do appendChar(45);
        }

        if (val > 9) {
            do setInt(val / 10);
        }
        do appendChar(c);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
