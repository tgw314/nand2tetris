// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 *  A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i;

        let n = 16;

        let i = 1;
        let powersOfTwo = Array.new(n);
        let powersOfTwo[0] = 1;

        while (i < n) {
            let powersOfTwo[i] = powersOfTwo[i - 1] + powersOfTwo[i - 1];
            let i = i + 1;
        }

        return;
    }

    function boolean bit(int x, int i) {
        return ~((x & powersOfTwo[i]) = 0);
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value. */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedx;
        var int i;

        let sum = 0;
        let shiftedx = x;

        let i = 0;
        while (i < n) {
            if (Math.bit(y, i)) {
                let sum = sum + shiftedx;
            }
            let shiftedx = shiftedx + shiftedx;

            let i = i + 1;
        }
        
        return sum;
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value. */
    function int divide(int x, int y) {
        var int q;
        var boolean isNeg;
        var int ans;

        let isNeg = ((x < 0) & (y > 0)) | ((x > 0) & (y < 0));

        let x = Math.abs(x);
        let y = Math.abs(y);

        if (x < y) {
            return 0;
        }

        let q = Math.divide(x, y + y);  // x / 2y
        let ans = q + q;

        // 2 * q * y (= ans * y)を乗算を使わずに実装できるらしい (ほんまに?)
        if (~((x - (ans * y)) < y)) {   // (x / y) >= (2q + 1)
            let ans = ans + 1;
        }

        if (isNeg) {
            return -ans;
        }
        return ans;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, i, a, aa;

        let y = 0;
        let i = (n / 2) - 1;
        while (i > -1) {
            let a = y + powersOfTwo[i];
            let aa = a * a;
            if (((aa < x) | (aa = x)) & aa > 0) {
                let y = a;
            }

            let i = i - 1;
        }

        return y;
    }

    /** Returns the greater value. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller value. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        }
        return x;
    }
}
