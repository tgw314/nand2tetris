// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;
    static int SEG_SIZE, SEG_NEXT;
    static int BLOCK_SIZE;

    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let SEG_SIZE = 0;
        let SEG_NEXT = 1;
        let BLOCK_SIZE = -1;

        let freeList = 2048;
        let freeList[SEG_SIZE] = 14335; // 2048 から 16383 までヒープ
        let freeList[SEG_NEXT] = null;

        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var Array cur, block;

        let cur = freeList;
        let block = 0;
        // first-fit
        while (cur) {
            if ((cur[SEG_SIZE] > (size + 2)) | (cur[SEG_SIZE] = size + 2)) {
                let block = cur + cur[SEG_SIZE] - size;
                let block[BLOCK_SIZE] = size + 1;
                let cur[SEG_SIZE] = cur[SEG_SIZE] - block[BLOCK_SIZE];
                return block;
            }
            let cur = cur[SEG_NEXT];
        }
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array cur, free;

        let cur = freeList;
        let free = o - 1;
        while (cur) {
            if (free = (cur + cur[SEG_SIZE])) {
                let cur[SEG_SIZE] = cur[SEG_SIZE] + free[SEG_SIZE];
                return;
            }
            if (cur[SEG_NEXT] = null) {
                let cur[SEG_NEXT] = free;
                return;
            }
            let cur = cur[SEG_NEXT];
        }
        return;
    }    
}
